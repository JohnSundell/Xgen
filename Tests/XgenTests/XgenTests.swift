/**
 *  Xgen
 *  Copyright (c) John Sundell 2017
 *  Licensed under the MIT license. See LICENSE file.
 */

import Foundation
import XCTest
import Xgen
import Files
import ShellOut

// MARK: - Test case

class XgenTests: XCTestCase {
    var folder: Folder!

    // MARK: - XCTestCase

    override func setUp() {
        super.setUp()
        folder = try! FileSystem().temporaryFolder.createSubfolderIfNeeded(withName: "XgenTests")
        try! folder.empty()
    }

    // MARK: - Tests

    func testGeneratingEmptyWorkspace() throws {
        let workspace = Workspace(path: folder.path + "Workspace")
        try workspace.generate()

        let workspaceFolder = try folder.subfolder(named: "Workspace.xcworkspace")
        let contentsFile = try workspaceFolder.file(named: "Contents.xcworkspacedata")
        let xml = try XMLDocument(data: contentsFile.read(), options: [])
        XCTAssertGreaterThan(xml.childCount, 0)
    }

    func testGeneratingAndBuildingWorkspace() throws {
        // In this test we generate & build a workspace containing a Xcode
        // project generated by the Swift Package Manager, to verify that the
        // generated workspace has a correct layout and is Xcode compatible

        // Start by generating the Xcode project
        let projectFolder = try folder.createSubfolder(named: "Project")
        let projectCommand = "swift package init && swift package generate-xcodeproj"
        try projectFolder.moveToAndPerform(command: projectCommand)

        // Generate workspace
        let workspace = Workspace(path: folder.path + "Workspace.xcworkspace")
        workspace.addProject(at: folder.path + "Project/Project.xcodeproj/")
        try workspace.generate()

        // Build using xcodebuild
        let buildCommand = "xcodebuild -workspace Workspace.xcworkspace -scheme Project-Package"
        let buildOutput = try folder.moveToAndPerform(command: buildCommand)
        XCTAssertTrue(buildOutput.contains("** BUILD SUCCEEDED **"))
    }

    func testGeneratingPlayground() throws {
        let code = "import Foundation\n\nprint(\"Hello world\")"
        let playground = Playground(
            path: folder.path + "Playground",
            platform: .macOS,
            code: code
        )

        try playground.generate()

        let playgroundFolder = try folder.subfolder(named: "Playground.playground")

        let codeFile = try playgroundFolder.file(named: "Contents.swift")
        try XCTAssertEqual(codeFile.readAsString(), code)

        let contentsFile = try playgroundFolder.file(named: "contents.xcplayground")
        let xml = try XMLDocument(data: contentsFile.read(), options: [])
        XCTAssertGreaterThan(xml.childCount, 0)
        XCTAssertTrue(try contentsFile.readAsString().contains(playground.platform.rawValue))
    }

    func testChangingPlaygroundPlatformUpdatesDefaultCode() throws {
        let playground = Playground(path: folder.path + "Playground")
        XCTAssertEqual(playground.platform, .iOS)

        playground.platform = .macOS
        try playground.generate()

        let codeFile = try folder.file(atPath: "Playground.playground/Contents.swift")
        try XCTAssertTrue(codeFile.readAsString().contains("import Cocoa"))
    }

    func testAddingGeneratingPlaygroundWithinWorkspace() throws {
        let workspace = Workspace(path: folder.path + "Workspace")
        workspace.addPlayground(named: "NewPlayground")
        try workspace.generate()

        let workspaceFolder = try folder.subfolder(named: "Workspace.xcworkspace")
        let playgroundFolder = try workspaceFolder.subfolder(named: "NewPlayground.playground")
        let contentsFile = try workspaceFolder.file(named: "Contents.xcworkspacedata")
        XCTAssertTrue(try contentsFile.readAsString().contains(playgroundFolder.path))
    }

    func testPlaygroundAutoRunsByDefault() {
        let playground = Playground(path: folder.path)
        XCTAssertTrue(playground.autoRun)
    }
    
    func testPlaygroundBuildsActiveSchemeByDefault() {
        let playground = Playground(path: folder.path)
        XCTAssertTrue(playground.buildActiveScheme)
    }

    func testGeneratingPlaygroundWithoutAutoRun() throws {
        let playground = Playground(path: folder.path + "Playground", autoRun: false)
        XCTAssertFalse(playground.autoRun)

        try playground.generate()

        let playgroundFolder = try folder.subfolder(named: "Playground.playground")
        let contentsFile = try playgroundFolder.file(named: "contents.xcplayground")
        let xml = try XMLDocument(data: contentsFile.read(), options: [])
        let autoRunAttribute = xml.rootElement()?.attribute(forName: "executeOnSourceChanges")
        XCTAssertEqual(autoRunAttribute?.stringValue, "false")
    }
    
    func testGeneratingPlaygroundWithoutBuildActiveScheme() throws {
        let playground = Playground(path: folder.path + "Playground", buildActiveScheme: false)
        XCTAssertFalse(playground.buildActiveScheme)

        try playground.generate()

        let playgroundFolder = try folder.subfolder(named: "Playground.playground")
        let contentsFile = try playgroundFolder.file(named: "contents.xcplayground")
        let xml = try XMLDocument(data: contentsFile.read(), options: [])
        let buildActiveSchemeAttribute = xml.rootElement()?.attribute(forName: "buildActiveScheme")
        XCTAssertEqual(buildActiveSchemeAttribute?.stringValue, "false")
    }

    func testPlaygroundWithoutAuxiliarySourceFilesDoesNotHaveSourcesFolder() throws {
        let playground = Playground(path: folder.path + "Playground")
        try playground.generate()

        let playgroundFolder = try folder.subfolder(named: "Playground.playground")
        XCTAssertFalse(playgroundFolder.containsSubfolder(named: "Sources"))
    }

    func testGeneratingPlaygroundWithAuxiliarySourceFiles() throws {
        let playground = Playground(path: folder.path + "Playground")
        try playground.auxiliarySourceFiles = [
            folder.createFile(named: "A.swift", contents: "//A"),
            folder.createFile(named: "B.swift", contents: "//B")
        ]

        try playground.generate()

        let playgroundFolder = try folder.subfolder(named: "Playground.playground")
        let sourcesFolder = try playgroundFolder.subfolder(named: "Sources")

        let sourceFileNames = sourcesFolder.files.map { $0.nameExcludingExtension }
        XCTAssertEqual(sourceFileNames, ["A", "B"])

        let sources = try sourcesFolder.files.map { try $0.readAsString() }
        XCTAssertEqual(sources, ["//A", "//B"])
    }
}

// MARK: - Extensions

private extension Folder {
    @discardableResult func moveToAndPerform(command: String) throws -> String {
        return try shellOut(to: "cd \(path) && \(command)")
    }
}
