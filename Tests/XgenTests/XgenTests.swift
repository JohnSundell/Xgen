/**
 *  Xgen
 *  Copyright (c) John Sundell 2017
 *  Licensed under the MIT license. See LICENSE file.
 */

import Foundation
import XCTest
@testable import Xgen
import Files
import ShellOut

// MARK: - Test case

class XgenTests: XCTestCase {
    var folder: Folder!

    // MARK: - XCTestCase

    override func setUp() {
        super.setUp()
        folder = try! FileSystem().temporaryFolder.createSubfolderIfNeeded(withName: "XgenTests")
        try! folder.empty()
    }

    // MARK: - Tests

    func testGeneratingEmptyWorkspace() throws {
        let workspace = Workspace(path: folder.path + "Workspace")
        try workspace.generate()

        let workspaceFolder = try folder.subfolder(named: "Workspace.xcworkspace")
        let contentsFile = try workspaceFolder.file(named: "Contents.xcworkspacedata")
        let xml = try XMLDocument(data: contentsFile.read(), options: [])
        XCTAssertGreaterThan(xml.childCount, 0)
    }

    func testGeneratingAndBuildingWorkspace() throws {
        // In this test we generate & build a workspace containing a Xcode
        // project generated by the Swift Package Manager, to verify that the
        // generated workspace has a correct layout and is Xcode compatible

        // Start by generating the Xcode project
        let projectFolder = try folder.createSubfolder(named: "Project")
        let projectCommand = "swift package init && swift package generate-xcodeproj"
        try projectFolder.moveToAndPerform(command: projectCommand)

        // Generate workspace
        let workspace = Workspace(path: folder.path + "Workspace.xcworkspace")
        workspace.addProject(at: folder.path + "Project/Project.xcodeproj/")
        try workspace.generate()

        // Build using xcodebuild
        let buildCommand = "xcodebuild -workspace Workspace.xcworkspace -scheme Project-Package"
        let buildOutput = try folder.moveToAndPerform(command: buildCommand)
        XCTAssertTrue(buildOutput.contains("** BUILD SUCCEEDED **"))
    }

    func testGeneratingPlayground() throws {
        let string = "import Foundation\n\nprint(\"Hello world\")"
        let playground = Playground(
            path: folder.path + "Playground",
            platform: .macOS,
            source: .code(string)
        )

        try playground.generate()

        let playgroundFolder = try folder.subfolder(named: "Playground.playground")

        let codeFile = try playgroundFolder.file(named: "Contents.swift")
        try XCTAssertEqual(codeFile.readAsString(), string)

        let contentsFile = try playgroundFolder.file(named: "contents.xcplayground")
        let xml = try XMLDocument(data: contentsFile.read(), options: [])
        XCTAssertGreaterThan(xml.childCount, 0)
        XCTAssertTrue(try contentsFile.readAsString().contains(playground.platform.rawValue))
    }

    func testChangingPlaygroundPlatformUpdatesDefaultCode() throws {
        let playground = Playground(path: folder.path + "Playground")
        XCTAssertEqual(playground.platform, .iOS)

        playground.platform = .macOS
        try playground.generate()

        let codeFile = try folder.file(atPath: "Playground.playground/Contents.swift")
        try XCTAssertTrue(codeFile.readAsString().contains("import Cocoa"))
    }

    func testAddingGeneratingPlaygroundWithinWorkspace() throws {
        let workspace = Workspace(path: folder.path + "Workspace")
        workspace.addPlayground(named: "NewPlayground")
        try workspace.generate()

        let workspaceFolder = try folder.subfolder(named: "Workspace.xcworkspace")
        let playgroundFolder = try workspaceFolder.subfolder(named: "NewPlayground.playground")
        let contentsFile = try workspaceFolder.file(named: "Contents.xcworkspacedata")
        XCTAssertTrue(try contentsFile.readAsString().contains(playgroundFolder.path))
    }

    func testGeneratingPlaygroundFromTemplate() throws {
        let code = "import Foundation\n\nprint(\"Hello world\")"
        let templateFolder = try folder.createTemplateFolder(withCode: code)
        let platform = Playground.Platform.iOS

        let playground = Playground(
            path: folder.path + "Playground",
            platform: platform,
            source: .template(path: templateFolder.path)
        )

        try playground.generate()

        let playgroundFolder = try folder.subfolder(named: "Playground.playground")

        let codeFile = try playgroundFolder.file(named: "Contents.swift")
        try XCTAssertEqual(codeFile.readAsString(), code)

        let sources = try playgroundFolder.subfolder(named: "Sources").files
        let template = try Playground.Template(path: templateFolder.path, platform: platform)
        let templateSources = try template.mainFolder.subfolder(named: "Sources").files
        XCTAssertEqual(sources.count, templateSources.count)
    }

    func testGeneratingPlaygroundFromTemplateWithNotAvailablePlatform() throws {
        let code = "import Foundation\n\nprint(\"Hello world\")"
        let templateFolder = try folder.createTemplateFolder(withCode: code)
        let platform = Playground.Platform.tvOS

        let playground = Playground(
            path: folder.path + "Playground",
            platform: platform,
            source: .template(path: templateFolder.path)
        )

        XCTAssertThrowsError(try playground.generate()) { error in
            guard let underlyingError = (error as? XgenError)?.underlyingError,
                case let Playground.Template.Error.notAvailableForPlatform(platformString) = underlyingError else {
                    return XCTFail()
            }
            XCTAssertEqual(platformString, platform.rawValue)
        }
    }

    func testGeneratingPlaygroundFromTemplateWithInvalidType() throws {
        let code = "import Foundation\n\nprint(\"Hello world\")"
        let info = ["AllowedTypes": ["com.apple.dt.project"]]
        let templateFolder = try folder.createTemplateFolder(withCode: code, info: info)

        let playground = Playground(
            path: folder.path + "Playground",
            platform: .iOS,
            source: .template(path: templateFolder.path)
        )

        XCTAssertThrowsError(try playground.generate()) { error in
            guard let underlyingError = (error as? XgenError)?.underlyingError,
                case Playground.Template.Error.invalidTemplateType = underlyingError else {
                    return XCTFail()
            }
        }
    }
}

// MARK: - Extensions

private extension Folder {
    @discardableResult func moveToAndPerform(command: String) throws -> String {
        return try shellOut(to: "cd \(path) && \(command)")
    }

    func createTemplateFolder(withCode code: String, info: [String: Any] = [:]) throws -> Folder {
        let folder = try createSubfolder(named: "Template.xctemplate")
        let templateFileName = "Playground.playground"
        let baseInfo: [String: Any] = [
            "AllowedTypes": ["com.apple.dt.playground"],
            "Platforms": ["com.apple.platform.iphoneos"],
            "MainTemplateFile": templateFileName,
            "Summary": "A Playground"
        ]
        let mergedInfo = info.merging(baseInfo) { (old, _) in old }
        let data = try PropertyListSerialization.data(fromPropertyList: mergedInfo, format: .xml, options: 0)
        try folder.createFile(named: "TemplateInfo.plist", contents: data)

        let playgroundFolder = try folder.createSubfolder(named: templateFileName)
        try playgroundFolder.createFile(named: "Contents.swift", contents: code)

        let templateSourcesFolder = try playgroundFolder.createSubfolder(named: "Sources")
        try templateSourcesFolder.createFile(named: "One.swift")
        try templateSourcesFolder.createFile(named: "Two.swift")

        return folder
    }
}
